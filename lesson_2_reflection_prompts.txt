Q1. What happens when you initialize a repository? Why do you need to do it?

  A hidden folder .git is created for initializing the working directory. To do this, we need run the command 'git init'.

Q2. How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area is a pipe to submit new file from working directory to the repository. It allows us to select existing file or new file which is ready to be part of the repository.

Q3. How can you use the staging area to make sure you have one commit per logical
change?

  First of all run the command 'git diff' without argument to show any changes but haven't been added to the staging area yet, then use the command 'git add filename' to add the changed file into the staging area in a logical change manner, finally commit the change.

Q4. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches can help manage different versions for specific features, also for developers to fix particular bugs without disruption to other development tasks.

Q5. How do the diagrams help you visualize the branch structure?

  It presents very clear path contains all commits and branches, for easy understanding the history of entire development.

Q6. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  Merging two branches together will combine codes produced by different developers, and two branches will be merged as one in the diagram.

Q7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

  Automatic
  PROS: save time to check codes
  CONS: Git will not know which part of code is the better choice, therefore automatic merging might make mistake.

  Always doing
  PROS: Make sure the right code is in place by human being rather than machine.
  CONS: Cost time to review code, particularly in complex and large project. 
